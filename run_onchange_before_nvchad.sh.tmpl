#!/bin/bash

#set -x

if [ ! -f "$HOME/.local/share/chezmoi/private_dot_config/dotfiles/scripts/global.sh" ]; then
    echo "Could not load global.sh, you've done something very bad."
    echo "Try rerunning 'chezmoi update'"
    exit 1
fi

{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "arch" }}
DISTRO="arch"
{{ else if eq .chezmoi.osRelease.id "fedora" }}
DISTRO="fedora"
{{ else }}
DISTRO="unkown"
{{ end }}
{{ end }}

source "$HOME/.local/share/chezmoi/private_dot_config/dotfiles/scripts/global.sh"
config_file="$HOME/.local/share/chezmoi/private_dot_config/dotfiles/config.json"
scripts_dir="$HOME/.local/share/chezmoi/private_dot_config/dotfiles/scripts/"

mkdir -p $HOME/.config/dotfiles/scripts/
mkdir -p $HOME/.config/dotfiles/packages/
touch "${output_config_file}"

# dependencies saved in the config file
echo "${info_box}Installing dependencies"
if [[ "${DISTRO}" -eq "arch" ]]; then
    echo "${info_box}${blue}󰣇 Arch$reset detected"
    sudo pacman -Syu --noconfirm --needed
    sudo pacman -S jq git gum --noconfirm --needed
else
    echo "${error_box}Currently unssuported linux distribution"
    echo "${skip_msg}Installing dependencies"
fi

if [ $(id -u) = 0 ]; then
  echo "${error_box}Please don't run this script as sudo, it will ask for permission by itself"
  exit 1
fi

#nvchad_setup()
#{
#  if [ -d ~/.config/nvim ]; then
#      echo "${info_box}Removing existing nvim config folder$reset">&2
#      if [ $(check_value "nvchad_overwrite_dir") == "true" ]; then
#        echo "${error_box}Removing NvChad configuration$reset">&2
#        #rm -rf ~/.config/nvim/
#        # Clone NvChad setup
#        git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
#      else
#          ans=$(dialog "${question_box}Would you like to rewrite your nvim config?$reset")>&2
#          if [[ $ans == "true" ]]; then
#            echo "${error_box}Removing previous nvim configuration $reset"
#            #rm -rf ~/.config/nvim
#            # Clone NvChad setup
#            git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
#          else
#            echo "$skip_msg NvChad setup$reset">&2
#          fi
#      fi
#     else
#       git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
#  fi
#}

echo "$green█▀▀ █▀█ █▀▀ █░░ ▄▀█ █▀█ ▀ █▀   █▀▄ █▀█ ▀█▀ █▀"
echo "█▀░ █▄█ █▄█ █▄▄ █▀█ █▀▄ ░ ▄█   █▄▀ █▄█ ░█░ ▄█$reset"
echo ""

# Skip installation
skip_installation=$(check_value "skip_script")
if [ "$skip_installation" == "true" ]; then
    echo "${error_box}Skipping script (if you don't expect this behaviour, edit your config file in ~/.config/scripts/config.json)$reset"
    exit 1
fi

# NvChad Setup
install_nvchad=$(check_value "nvchad")
if [ "$install_nvchad" == "true" ]; then
    echo "${info_box}NvChad setup$reset"
    if [ -d ~/.config/nvim ]; then
        echo "${info_box}Removing existing nvim config folder$reset"
        if [ $(check_value "nvchad_overwrite_dir") == "true" ]; then
            echo "${error_box}Removing NvChad configuration$reset"
            rm -rfv ~/.config/nvim/
            # Clone NvChad setup
            git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
        else
            gum confirm "${question_box}Would you like to rewrite your nvim config?$reset" && ans="true" || ans="false"
            if [[ $ans == "true" ]]; then
                echo "${error_box}Removing previous nvim configuration $reset"
                rm -rfv ~/.config/nvim
                # Clone NvChad setup
                git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
            else
                echo "$skip_msg NvChad setup$reset"
            fi
        fi
    else
        git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
    fi
elif [ "$install_nvchad" == "false" ]; then
    echo "${skip_msg}NvChad setup$reset"
else
    gum confirm "${question_box}Install neovim NvChad configuration?$reset" && ans="true" || ans="false"
    if [[ $ans == "true" ]]; then
        if [ -d ~/.config/nvim ]; then
            echo "${info_box}Removing existing nvim config folder$reset"
            if [ $(check_value "nvchad_overwrite_dir") == "true" ]; then
                echo "${error_box}Removing NvChad configuration$reset"
                #rm -rf ~/.config/nvim/
                # Clone NvChad setup
                git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
            else
                gum confirm "${question_box}Would you like to rewrite your nvim config?$reset" && ans="true" || ans="false"
                if [[ $ans == "true" ]]; then
                    echo "${error_box}Removing previous nvim configuration $reset"
                    #rm -rf ~/.config/nvim
                    # Clone NvChad setup
                    git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
                else
                    echo "$skip_msg NvChad setup$reset"
                fi
            fi
        else
            git clone https://github.com/NvChad/starter ~/.config/nvim --depth 2
        fi
    fi
fi

# Config
echo "${info_box}Scripts to run ${red}before${reset} file sync"
scripts_to_run_before_config=$(return_value "scripts_before")
if [[ $scripts_to_run_before_config != "null" ]]; then
    scripts_to_run_before_config=$(json_to_bash_array "$scripts_to_run_before_config")
    for script in ${scripts_to_run_before_config[@]}; do
        if [ -f "${scripts_dir}${script}" ]; then
            echo "${info_box}Executing script ${scripts_dir}${script}"
            chmod +x "${scripts_dir}${script}"
            sh "${scripts_dir}/${script}"
        else
            echo "${error_box}Script not detected in ~/.local/bin/setup_scripts/ move it into this directory."
        fi
    done
fi

# Complete user templates
echo "${info_box}Complete template file"
if [[ $(check_value "config_template") != "false" ]]; then
  if [[ -f "${template_config_file}" ]]; then
    echo "${error_box}File already exist."
    backup_file $template_config_file
  fi
  
  #TODO: Copy file from directory and fill every variables in it
  email=$(gum input --prompt "${question_box}Enter your git email for .gitignore: " --placeholder "john.doe@gmail.com")
  create_chezmoi_toml $email

fi

# Interactive user
if [[ $(check_value "scripts_before_dialog") == "true" || $(check_value "scripts_before_dialog") == "null" ]]; then
    scripts_to_execute=($(list_scripts "${scripts_dir}"))
    for script in ${scripts_to_execute[@]}; do
        if [[ $(dialog "${question_box}Run script $script?$reset") == "true" && -f "${scripts_dir}${script}" ]]; then
            echo "$info_box Executing script $script...$reset"
            chmod +x "${scripts_dir}${script}"
            sh "$scripts_dir$script"
        else
            echo "${skip_msg} script $script"
        fi
    done
fi


