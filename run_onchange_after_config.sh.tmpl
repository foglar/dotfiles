#!/bin/bash

#set -x

{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "arch" }}
DISTRO="arch"
{{ else if eq .chezmoi.osRelease.id "fedora" }}
DISTRO="fedora"
{{ else }}
DISTRO="unkown"
{{ end }}
{{ end }}

if [ ! -f "$HOME/.config/dotfiles/scripts/global.sh" ]; then
  echo "Could not load global.sh, you've done something very bad."
  echo "Try rerunning 'chezmoi update'"
  exit 1
fi

source "$HOME/.config/dotfiles/scripts/global.sh"

if [ $(id -u) = 0 ]; then
  echo "Please don't run this script as sudo, it will ask for permission by itself"
  exit 1
fi

# Skip installation
skip_installation=$(check_value "skip_script")
if [ "$skip_installation" == "true" ]; then
  echo "${error_box}Skipping script (if you don't expect this behaviour, edit your config file in ~/.config/scripts/config.json)$reset"
  exit 1
fi

echo "Installation of applications"

# If arch linux ask for blackarch
if [[ ${DISTRO} -eq "arch" ]]; then
  # Blackarch repository setup
  echo "${info_box}Setup blackarch repository"
  blackarch_repository_config=$(return_value "blackarch_repo")
  if [ "$blackarch_repository_config" == "null" ]; then
    blackarch_repository_config=$(dialog "${question_box}Add blackarch repo$reset")
  fi
  echo "${info_box}Blackarch repository: ${blackarch_repository_config}"
else
  blackarch_repository_config="false"
fi

# Install KDE GNOME or Hyprland
echo "${info_box}Setup desktop environment"
desktop_environment_config=$(return_value "desktop_environment")
if [[ "$desktop_environment_config" != "kde" && "$desktop_environment_config" != "gnome" && "$desktop_environment_config" != "hyprland" && "$desktop_environment_config" != "skip" ]]; then
  echo "$blue"
  select desktop in kde gnome hyprland skip; do
    echo "$reset"
    case "$REPLY" in
    1)
      echo "${info_box}Picked KDE$reset"
      break
      ;;
    2)
      echo "${info_box}Picked GNOME$reset"
      break
      ;;
    3)
      echo "${info_box}Picked Hyprland$reset"
      break
      ;;
    4)
      echo "${info_box}Skipping desktop environment$reset"
      break
      ;;
    *) echo "${error_box}Enter number 1-4:" ;;
    esac
  done
  desktop_environment_config=$desktop
fi

# Applications to install setup
echo "${info_box}Setup applications category"
applications_to_install_config=$(return_value "category")
if [[ "$applications_to_install_config" != "minimal" && "$applications_to_install_config" != "base" && "$applications_to_install_config" != "full" && "$applications_to_install_config" != "custom" && "$applications_to_install_config" != "skip" ]]; then
  echo "$blue"
  select category in minimal base full custom skip; do
    echo "$reset"
    case "$REPLY" in
    1)
      echo "${info_box}Picked category Minimal$reset"
      break
      ;;
    2)
      echo "${info_box}Picked category Base$reset"
      break
      ;;
    3)
      echo "${info_box}Picked category Full$reset"
      break
      ;;
    4)
      echo "${info_box}Picked category Custom$reset"
      break
      ;;
    5)
      echo "${info_box}Skipping installation of applications$reset"
      break 
      ;;
    *) echo "${error_box}Enter number 1-5:" ;;
    esac
  done
  applications_to_install_config=$category
fi

# Custom lists
echo "${info_box}Application category: ${applications_to_install_config}"
if [[ "$applications_to_install_config" == "custom" && $(return_value "categories_to_install") != "null" ]]; then
  json_data=$(return_value "categories_to_install")
  categories_to_install_config=$(json_to_bash_array "$json_data")
  read -r -a categories_to_install_config <<<"$categories_to_install_config"
elif [[ "$applications_to_install_config" == "custom" && $(return_value "categories_to_install") == "null" ]]; then
  categories=($(list_lst_scripts "packages/"))
  categories_to_install_config=()
  for category_file in ${categories[@]}; do
    ans=$(dialog "${question_box}Install packages from $category_file?$reset")
    if [[ $ans == "true" ]]; then
      categories_to_install_config+=("$category_file")
    fi
  done
fi

# Which scripts to execute
echo "${info_box}Setup scripts"
# After

# Config
echo "${info_box}Scripts to run ${red}after${reset} file sync"
scripts_to_run_after_config=$(return_value "scripts_after")
scripts_to_run_after_checked=()

if [[ $scripts_to_run_after_config != "null" ]]; then
  scripts_to_run_after_config=$(json_to_bash_array "$scripts_to_run_after_config")
  for script in ${scripts_to_run_after_config[@]}; do
    result=$(is_in_array "${script}" "${scripts_to_run_after_checked[@]}")
    if [[ $result -eq 1 && -f "${scripts_dir}${script}" ]]; then
      echo "${info_box}Running script$red ${script}$reset after file sync$reset"
      scripts_to_run_after_checked+=("$script")
    else
      echo "${error_box}Script $script is already in list of run scripts"
    fi
  done
fi

# User
if [[ $(check_value "scripts_after_dialog") == "true" || $(check_value "scripts_after_dialog") == "null" ]]; then
  scripts_to_execute=($(list_scripts "$scripts_dir"))
  scripts_to_execute_checked=()
  for script in ${scripts_to_execute[@]}; do
    result=$(is_in_array "${script}" "${scripts_to_run_after_checked[@]}")
    if [[ $(dialog "${question_box}Run script $script after file sync?$reset") == "true" && -f "${scripts_dir}${script}" && $result -eq 1 ]]; then
      scripts_to_run_after_checked+=("$script")
      echo "${info_box}Running script $script after file sync"
    else
      echo "${skip_msg} $script"
    fi
  done
fi

# Nvidia
if [[ $(check_value "nvidia") != "false" ]]; then
    if [[ $(nvidia_detect) == "true" ]]; then
      echo "${info_box}Nvidia GPU detected"
      if [[ $(dialog "${question_box}Would you like to install nvidia drivers?") == "true" ]]; then
        nvidia="true"
        else
          nvidia="false"
      fi
    fi
else
    nvidia="false"
fi

# Warthunder
if [[ $(check_value "warthunder") == "null" ]]; then
  if [[ $(dialog "Would you like to install WarThunder launcher?") == "false" ]]; then
    warthunder="false"
  else
      warthunder="true"
  fi
elif [[ $(check_value "warthunder") == "true" ]]; then
  warthunder="true"
else
  warthunder="false"
fi

# Github copilot
if [[ $(check_value "gh_copilot") == "true" ]]; then
  gh_copilot="true"
elif [[ $(check_value "gh_copilot") == "null" ]]; then
  if [[ $(dialog "Would you like to setup gh copilot in cli?") == "false" ]]; then
    gh_copilot="false"
  else
      gh_copilot="true"
  fi
fi

# Cleanup
if [[ $(check_value "cleanup_after_install") == "null" ]]; then
  if [[ $(dialog "${question_box}Clean all not needed files after installation?${reset}") == "true" ]]; then 
      cleanup_after_install="true"
  else
      cleanup_after_install="false"
  fi
elif [[ $(check_value "cleanup_after_install") == "true" ]]; then
  echo "${info_box}Cleanup is set to true"
  cleanup_after_install="true"
else
  echo "${info_box}Cleanup is set to false"
  cleanup_after_install="false"
fi

# Save configuration
echo "${info_box}Saving configuration"
if [[ "$applications_to_install_config" == "custom" ]]; then
  json=$(jq -n \
    --arg blackarch_repo "$blackarch_repository_config" \
    --arg desktop_environment "$desktop_environment_config" \
    --arg category "$applications_to_install_config" \
    --argjson categories_to_install_config "$(printf '%s\n' "${categories_to_install_config[@]}" | jq -R . | jq -s .)" \
    --argjson scripts_after "$(printf '%s\n' "${scripts_to_run_after_checked[@]}" | jq -R . | jq -s .)" \
    --arg cleanup "$cleanup_after_install" \
    --arg warthunder "$warthunder" \
    --arg nvidia "$nvidia" \
    --arg gh_copilot "$gh_copilot" \
    '{"blackarch_repo": $blackarch_repo,"desktop_environment": $desktop_environment , "category": $category, "categories_to_install": $categories_to_install_config, "scripts_after": $scripts_after, "cleanup": $cleanup, "warthunder": $warthunder, "nvidia": $nvidia, "gh_copilot": $gh_copilot}' \
    >$output_config_file)
else
  json=$(jq -n \
    --arg blackarch_repo "$blackarch_repository_config" \
    --arg desktop_environment "$desktop_environment_config" \
    --arg category "$applications_to_install_config" \
    --argjson scripts_after "$(printf '%s\n' "${scripts_to_run_after_checked[@]}" | jq -R . | jq -s .)" \
    --arg cleanup "$cleanup_after_install" \
    --arg warthunder "$warthunder" \
    --arg nvidia "$nvidia" \
    --arg gh_copilot "$gh_copilot" \
    '{"blackarch_repo": $blackarch_repo,"desktop_environment": $desktop_environment , "category": $category, "scripts_after": $scripts_after, "cleanup": $cleanup, "warthunder": $warthunder, "nvidia": $nvidia, "gh_copilot": $gh_copilot}' \
    >$output_config_file)
fi
