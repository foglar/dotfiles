#!/bin/bash

#set -x

{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "arch" }}
DISTRO="arch"
{{ else if eq .chezmoi.osRelease.id "fedora" }}
DISTRO="fedora"
{{ else }}
DISTRO="unkown"
{{ end }}
{{ end }}

if [ ! -f "$HOME/.config/dotfiles/scripts/global.sh" ]; then
  echo "Could not load global.sh, you've done something very bad."
  echo "Try rerunning 'chezmoi update'"
  exit 1
fi

source "$HOME/.config/dotfiles/scripts/global.sh"

if [ $(id -u) = 0 ]; then
  echo "Please don't run this script as sudo, it will ask for permission by itself"
  exit 1
fi

# Skip installation
skip_installation=$(check_value "skip_script")
if [ "$skip_installation" == "true" ]; then
  echo "${error_box}Skipping script (if you don't expect this behaviour, edit your config file in ~/.config/scripts/config.json)$reset"
  exit 1
fi

# If arch linux ask for blackarch
if [[ ${DISTRO} -eq "arch" ]]; then
  # Blackarch repository setup
  blackarch_repository_config=$(return_value "blackarch_repo")
  if [ "$blackarch_repository_config" == "null" ]; then
   gum confirm "${question_box}Add blackarch repository?$reset" && blackarch_repository_config="true" || blackarch_repository_config="false"
  fi
else
  blackarch_repository_config="false"
fi
echo "${info_box}Add Blackarch: ${blackarch_repository_config}"

# Change default shell
if [[ $(check_value "change_shell") == "null" ]]; then
  change_shell=$(gum choose --height 5 --header "${question_box}What shell do you prefer?" bash zsh fish)
elif [[ $(return_value "change_shell") != "null" ]]; then
  change_shell=$(return_value "change_shell")
else
  change_shell="null"
fi
echo "${info_box}Selected shell: ${change_shell}"


if [[ $(return_value "default_browser") == "null" ]]; then
  default_browser=$(gum choose --height 5 --header "${question_box}What browser do you prefer?" firefox librewolf brave)
else
  default_browser=$(return_value "default_browser")
fi
echo "${info_box}Default browser: ${default_browser}"

# Install KDE GNOME or Hyprland
desktop_environment_config=$(return_value "desktop_environment")
if [[ "$desktop_environment_config" != "kde" && "$desktop_environment_config" != "gnome" && "$desktop_environment_config" != "hyprland" && "$desktop_environment_config" != "skip" ]]; then
  echo "$blue"
  desktop_environment_config=$(gum choose --no-limit --header "What desktop environmet would you like to install" gnome kde hyprland skip)
fi
echo "${info_box}Desktop: ${desktop_environment_config}"

# Applications to install setup
applications_to_install_config=$(return_value "category")
if [[ "$applications_to_install_config" != "minimal" && "$applications_to_install_config" != "base" && "$applications_to_install_config" != "full" && "$applications_to_install_config" != "custom" && "$applications_to_install_config" != "skip" ]]; then
  category=$(gum choose --header "Setup your desktop environments" Minimal Base Full Custom Skip)
  applications_to_install_config=$category
fi

# Custom lists
if [[ "$applications_to_install_config" == "Custom" && $(return_value "categories_to_install") != "null" ]]; then
  json_data=$(return_value "categories_to_install")
  categories_to_install_config=$(json_to_bash_array "$json_data")
  read -r -a categories_to_install_config <<<"$categories_to_install_config"
elif [[ "$applications_to_install_config" == "Custom" && $(return_value "categories_to_install") == "null" ]]; then
  categories=($(list_lst_scripts "$HOME/.config/dotfiles/packages"))
  categories_to_install_config=()
  categories=$(for category_file in "${categories[@]}"; do
    echo "$category_file"
  done | gum choose --no-limit)
fi

# Config
echo "${info_box}Scripts to run ${red}after${reset} file sync"
scripts_to_run_after_config=$(return_value "scripts_after")
scripts_to_run_after_checked=()

if [[ $scripts_to_run_after_config != "null" ]]; then
  scripts_to_run_after_config=$(json_to_bash_array "$scripts_to_run_after_config")
  for script in ${scripts_to_run_after_config[@]}; do
    result=$(is_in_array "${script}" "${scripts_to_run_after_checked[@]}")
    if [[ $result -eq 1 && -f "${scripts_dir}${script}" ]]; then
      echo "${info_box}Running script$red ${script}$reset after file sync$reset"
      scripts_to_run_after_checked+=("$script")
    else
      echo "${error_box}Script $script is already in list of run scripts"
    fi
  done
fi

# User
if [[ $(check_value "scripts_after_dialog") == "true" || $(check_value "scripts_after_dialog") == "null" ]]; then
  scripts_to_execute=($(list_scripts "$scripts_dir") "skip")
  
  # Use gum to select scripts to run after file sync
  scripts_to_run_after_checked=()
  selected_scripts=$(for script in ${scripts_to_execute[@]}; do echo $script; done | gum choose --no-limit --height 15 --header "Select scripts to run")

  for script in ${selected_scripts}; do
    if [[ -f "${scripts_dir}${script}" ]]; then
      scripts_to_run_after_checked+=("$script")
      echo "${info_box}Executing $script after file synchronization"
    else
      echo "${skip_msg} script $script"
    fi
  done
fi

# What groups should add user
# add to groups from config file, check if value in config file is set to true, if
#if [[ $(check_value "group_dialog") == "true" || $(check_value "group_dialog") == "null" ]]; then
#  groups = $(list_groups)
#
#  groups_to_add=()
#  while true; do
#    if [[ $(dialog "${question_box}Create group ${group} for user?$reset") == "true" ]]; then
#      groups_to_add+=("$group")
#    else
#      echo "${info_box}Skipping group creation"
#      break
#    fi
#  done
#fi

# Setup GRUB theme
if [[ $(check_value "grub_theme") == "null" ]]; then
  gum confirm "${question_box}Configure GRUB theme?$reset" && grub_theme="true" || grub_theme="false"
elif [[ $(check_value "grub_theme") == "true" ]]; then
    grub_theme="true"
else
  grub_theme="false"
fi

# SDDM dialog
if [[ $(check_value "sddm_theme") == "none" ]]; then
  gum confirm "${question_box}Set SDDM theme?$reset" && grub_theme="true" || grub_theme="false"
else
  sddm_theme="true"
fi

# Nvidia
if [[ $(check_value "nvidia") != "false" ]]; then
  if [[ $(nvidia_detect) == "0" ]]; then
    echo "${info_box}Nvidia GPU detected"
    if [[ $(check_value "nvidia") != "true" ]]; then
      if gum confirm "${question_box}Install NVIDIA drivers?$reset"; then
          nvidia="true"
      else
        nvidia="false"
      fi
  fi
elif [[ $(check_value "nvidia") == "true" ]]; then
    nvidia="true"
else
  nvidia="false"
fi

# Warthunder
if [[ $(check_value "warthunder") == "null" ]]; then
  gum confirm "${question_box}Would you like to install Warthunder Launcher?$reset" && warthunder="true" || warthunder="false"
elif [[ $(check_value "warthunder") == "true" ]]; then
  warthunder="true"
else
  warthunder="false"
fi

# Github copilot
if [[ $(check_value "gh_copilot") == "true" ]]; then
  gh_copilot="true"
elif [[ $(check_value "gh_copilot") == "null" ]]; then
  gum confirm "${question_box}Setup github copilot in github-cli?$reset" && gh_copilot="true" || gh_copilot="false"
fi

# Cleanup
if [[ $(check_value "cleanup_after_install") == "null" ]]; then
  gum confirm "${question_box}Clean all not needed files after installation?$reset" && cleanup_after_install="true" || cleanup_after_install="false"
elif [[ $(check_value "cleanup_after_install") == "true" ]]; then
  echo "${info_box}Cleanup is set to true"
  cleanup_after_install="true"
else
  echo "${info_box}Cleanup is set to false"
  cleanup_after_install="false"
fi

# Save configuration
echo "${info_box}Saving configuration"
if [[ "$applications_to_install_config" == "custom" ]]; then
  json=$(jq -n \
    --arg blackarch_repo "$blackarch_repository_config" \
    --arg desktop_environment "$desktop_environment_config" \
    --arg category "$applications_to_install_config" \
    --argjson categories_to_install_config "$(printf '%s\n' "${categories_to_install_config[@]}" | jq -R . | jq -s .)" \
    --argjson scripts_after "$(printf '%s\n' "${scripts_to_run_after_checked[@]}" | jq -R . | jq -s .)" \
    --arg cleanup "$cleanup_after_install" \
    --arg warthunder "$warthunder" \
    --arg nvidia "$nvidia" \
    --arg gh_copilot "$gh_copilot" \
    --arg change_shell "$change_shell" \
    --arg sddm_theme "$sddm_theme" \
    --arg default_browser "$default_browser" \
    --arg grub_theme "$grub_theme" \
    '{"blackarch_repo": $blackarch_repo,"desktop_environment": $desktop_environment , "category": $category, "categories_to_install": $categories_to_install_config, "scripts_after": $scripts_after, "cleanup": $cleanup, "warthunder": $warthunder, "nvidia": $nvidia, "gh_copilot": $gh_copilot, "change_shell": $change_shell, "sddm_theme": $sddm_theme, "default_browser": $default_browser, "grub_theme": $grub_theme}' \
    >$output_config_file)
else
  json=$(jq -n \
    --arg blackarch_repo "$blackarch_repository_config" \
    --arg desktop_environment "$desktop_environment_config" \
    --arg category "$applications_to_install_config" \
    --argjson scripts_after "$(printf '%s\n' "${scripts_to_run_after_checked[@]}" | jq -R . | jq -s .)" \
    --arg cleanup "$cleanup_after_install" \
    --arg warthunder "$warthunder" \
    --arg nvidia "$nvidia" \
    --arg gh_copilot "$gh_copilot" \
    --arg change_shell "$change_shell" \
    --arg sddm_theme "$sddm_theme" \
    --arg default_browser "$default_browser" \
    --arg grub_theme "$grub_theme" \
    '{"blackarch_repo": $blackarch_repo,"desktop_environment": $desktop_environment , "category": $category, "scripts_after": $scripts_after, "cleanup": $cleanup, "warthunder": $warthunder, "nvidia": $nvidia, "gh_copilot": $gh_copilot, "change_shell": $change_shell, "sddm_theme": $sddm_theme, "default_browser": $default_browser, "grub_theme": $grub_theme}' \
    >$output_config_file)
fi
