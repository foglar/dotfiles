#!/bin/bash

#set -x

{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "arch" }}
DISTRO="arch"
INSTALLER="sudo pacman -S"
{{ else if eq .chezmoi.osRelease.id "fedora" }}
DISTRO="fedora"
INSTALLER="sudo dnf install"
{{ else }}
DISTRO="unkown"
{{ end }}
{{ end }}

if [ ! -f "$HOME/.config/dotfiles/scripts/global.sh" ]; then
    echo "Could not load global.sh, you've done something very bad."
    echo "Try rerunning 'chezmoi update'"
    exit 1
fi

USERNAME=$(echo $USER)

source "$HOME/.config/dotfiles/scripts/global.sh"

install_category() {
    local category="$1"
    echo "$green[*]$blue Installing packages from $category$reset"
    while IFS= read -r pkg; do
        if [ -n "$pkg" ]; then
          if [[ $(pkg_installed "$pkg") == 0 ]] ; then
                echo "$green[*]$blue skipping $pkg..."
            elif pkg_available "$pkg"; then
                echo "$green[*]$blue queueing $pkg from$green arch$blue repo..."
                pkg_arch+=" $pkg"
            elif aur_available "$pkg"; then
                echo "$green[*]$blue queueing $pkg from$green aur$blue..."
                pkg_aur+=" $pkg"
            else
                echo "$red[!] error: unknown package $pkg..."
            fi
        fi
    done < <(cut -d '#' -f 1 "${category}")

    if [ -n "$pkg_arch" ]; then
        echo "$green[*]$blue installing $pkg_arch from arch repo...$reset"
        sudo pacman -S $pkg_arch --noconfirm
    fi

    if [ -n "$pkg_aur" ]; then
        echo "$green[*]$blue installing $pkg_aur from aur...$reset"
        if [[ $installer == "paru" ]]; then
          "$installer" -S $pkg_aur --skipreview --noconfirm --needed
        else
          "$installer" -S $pkg_aur --noconfirm --needed

        fi
    fi
}

if [ $(id -u) = 0 ]; then
  echo "${error_box}Please don't run this script as sudo, it will ask for permission by itself"
  exit 1
fi

skip_installation=$(check_value "skip_script")
if [ "$skip_installation" == "true" ]; then
    echo "${error_box}Skipping script (if you don't expect this behaviour, edit your config file in ~/.config/scripts/config.json)$reset"
    exit 1
fi

# Installation of applications
echo "${info_box}Installation of applications"
if [[ "${DISTRO}" -eq "arch" ]]; then
  echo "${blue}ó°£‡ Arch$reset detected"
    
    if [[ $(check_value "blackarch_repo" "${output_config_file}") == "true" ]]; then
      echo "${info_box} Updating repositories$reset"
      sudo pacman -Syu --noconfirm
      echo "${info_box} Adding blackarch repositories$reset"
      curl -O https://blackarch.org/strap.sh 
      echo 26849980b35a42e6e192c6d9ed8c46f0d6d06047 strap.sh | sha1sum -c 
      chmod +x strap.sh
      sudo ./strap.sh
      sudo pacman -Syy --noconfirm
    fi

    if [[ $(is_blackarch_repository) == "true" ]]; then
      echo "${info_box}Succesfully added blackarch repositories"
      echo "${info_box}Installing paru aur helper from blackarch repositories"
      install paru ${DISTRO}
      installer="paru"
    fi
    
    if [[ $(pkg_installed "paru") != 0 ]]; then
      echo "${error_box}Failed to install paru from repo, installing ${blue}paru${reset} aur helper manually"
      sh "${scripts_dir}install_aur.sh" "paru"
    fi

    if [[ $(pkg_installed "paru") != 0 ]]; then
      if [[ $(is_blackarch_repository) == "true" ]]; then
        echo "${error_box}Failed to install paru manually, installing ${blue}yay${blue} from blackarch repo"
        install yay ${DISTRO}
        installer="yay"
      fi
    fi

    if [[ $(pkg_installed "yay") != 0 && $(pkg_installed "paru") != 0 ]]; then
        echo "${error_box}Failed to install yay, installing ${blue}yay${reset} aur helper manually instead"
        sh "${scripts_dir}install_aur.sh" "yay"
        installer="yay"
    fi
    
    if [[ $(pkg_installed "yay") != 0 && $(pkg_installed "paru") != 0 ]]; then
      echo "${error_box}Failed to install yay, installing only basic repo packages with pacman, install aur helper yourself"
      installer="pacman"
    fi

    desktop_environment=$(return_value "desktop_environment" "${output_config_file}")
    if [[ ${desktop_environment} != "skip" ]]; then
      echo "${info_box}Installing desktop environment ${desktop_environment}"
      if [[ ${desktop_environment} == "kde" ]]; then
        echo "${info_box}Installing KDE Plasma"
        install plasma-meta ${DISTRO}
      elif [[ ${desktop_environment} == "gnome" ]]; then
        echo "${info_box}Installing GNOME"
        install gnome ${DISTRO}
      elif [[ ${desktop_environment} == "hyprland" ]]; then
        install hyprland ${DISTRO}
        install hyprlock ${DISTRO}
      fi
    fi
  
    categories=$(return_value categories_to_install "${output_config_file}")
    categories_list=$(json_to_bash_array "${categories}")

    if [[ $(return_value category "${output_config_file}") == "Minimal" ]]; then
      echo ""
      install_category "${default_app_list_dir}/minimal.lst"
    elif [[ $(return_value category "${output_config_file}") == "Base" ]]; then
        install_category "${default_app_list_dir}/base.lst"
    elif [[ $(return_value category "${output_config_file}") == "Full" ]]; then
        install_category "${default_app_list_dir}/full.lst"
    elif [[ $(return_value category "${output_config_file}") == "Custom" ]]; then
        for category_file in ${categories_list[@]}; do
            install_category "$HOME/.config/dotfiles/packages/$category_file"
        done
    elif [[ $(return_value category) == "skip" ]]; then
          echo "${skip_msg} Installation"
    else
      echo "${error_box}Invalid category skipping installation"
    fi

    if [[ $(check_value "nvidia" ${output_config_file}) == "true" ]]; then
      install "nvidia cuda" ${DISTRO}
    fi
else
  echo "${DISTRO} is unsupproted distribution, feel free to implement this yourself and contribute to this project."
fi 

# Change default shell
shell=$(return_value "change_shell" "${output_config_file}")
if [[ $shell != "null" ]]; then
  echo "${info_box}Changing default shell to ${shell}"
  install ${shell} ${DISTRO}
  sudo chsh -s /bin/${shell} $USERNAME
fi

# Change default browser
browser=$(return_value "default_browser" "${output_config_file}")
if [[ $browser != "null" ]]; then
  echo "${info_box}Changing default browser to ${browser}"
  install "xdg-utils" ${DISTRO}
  install "qt5-tools" ${DISTRO}
  if [[ ${browser} == "brave" ]]; then
    xdg-settings set default-web-browser ${browser}-browser.desktop
  else
    xdg-settings set default-web-browser ${browser}.desktop
  fi
fi

# Change grub theme
if [[ $(check_value "grub_theme" "${output_config_file}") == "true" ]]; then
  echo "${info_box}Setting up your grub theme"
  install grub-customizer ${DISTRO}
  cd ~/.config/dotfiles/grub-theme && sudo ./install.sh && cd -
fi

# Change sddm theme
#if [[ $(return_value "sddm_theme" "${output_config_file}") != "true" ]]; then
#  echo "${info_box}Changing SDDM theme"
#  git clone https://github.com/MarianArlt/kde-plasma-chili /usr/share/sddm/themes/chili
#fi

# Executing scripts
if [[ $(return_value "scripts_after" "${output_config_file}") != "null" ]]; then
      scripts=$(return_value "scripts_after" "${output_config_file}")
      scripts_after=$(json_to_bash_array "${scripts}")
      for script in ${scripts_after[@]}; do
        echo "${info_box} Executing script ${scripts_dir}${script}"
        chmod +x "${scripts_dir}${script}"
        sh "${scripts_dir}${script}"
      done
fi

if [[ $(return_value "vencord") == "true" ]]; then
  curl -s https://api.github.com/repos/Vencord/Installer/releases/latest | grep "VencordInstallerCli-linux" | cut -d : -f 2,3 | tr -d \" | wget -qi -
  sudo VencordInstallerCli-linux -install -location /opt/discord
fi

if [[ $(return_value "warthunder" "${output_config_file}") == "true" ]]; then
  echo "${info_box}Installing WarThunder launcher"
  install "wget" ${DISTRO}
  install "gtk3" ${DISTRO}
  wget "https://warthunder.com/download/launcherLinux/" --output-document wt.tar.gz
  tar xvf wt.tar.gz
  chmod -R +x WarThunder/
  sudo rm -rf /opt/WarThunder
  sudo mv WarThunder /opt/
  #rm -v wt.tar.gz
fi

if [[ $(return_value "gh_copilot") == "true" ]]; then
  install "github-cli" ${DISTRO}
  gh auth login && gh extension install github/gh-copilot 
fi

if [[ $(return_value "groups") == "true" ]]; then
  groups=$(return_value "groups_list" "${output_config_file}")
  groups_list=$(json_to_bash_array "${groups}")
  for group in ${groups_list[@]}; do
    echo "${info_box}Adding ${USER} to group ${group}"
    add_user_to_group "$group"
  done
fi

# Post install cleanup
if [[ $(return_value "cleanup" "${output_config_file}") == "true" ]]; then
  echo "rm -rfv strap.sh"
  #rm -rfv strap.sh
  echo "rm -rfv $HOME/README.md"
  #rm -rfv $HOME/README.md
  echo "rm -rfv $HOME/go"
  #rm -rfv $HOME/go
fi

echo "Installation finished"

