#!/bin/bash

#set -x

{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "arch" }}
DISTRO="arch"
{{ else if eq .chezmoi.osRelease.id "fedora" }}
DISTRO="fedora"
{{ else }}
DISTRO="unkown"
{{ end }}
{{ end }}

if [ ! -f "$HOME/.config/dotfiles/scripts/global.sh" ]; then
    echo "Could not load global.sh, you've done something very bad."
    echo "Try rerunning 'chezmoi update'"
    exit 1
fi

source "$HOME/.config/dotfiles/scripts/global.sh"

install_category() {
    local category="$1"
    echo "$green[*]$blue Installing packages from $category$reset"
    while IFS= read -r pkg; do
        if [ -n "$pkg" ]; then
          if [[ $(pkg_installed "$pkg") == 0 ]] ; then
                echo "$green[*]$blue skipping $pkg..."
            elif pkg_available "$pkg"; then
                echo "$green[*]$blue queueing $pkg from$green arch$blue repo..."
                pkg_arch+=" $pkg"
            elif aur_available "$pkg"; then
                echo "$green[*]$blue queueing $pkg from$green aur$blue..."
                pkg_aur+=" $pkg"
            else
                echo "$red[!] error: unknown package $pkg..."
            fi
        fi
    done < <(cut -d '#' -f 1 "${category}")

    if [ -n "$pkg_arch" ]; then
        echo "$green[*]$blue installing $pkg_arch from arch repo...$reset"
        sudo pacman -S $pkg_arch --noconfirm
    fi

    if [ -n "$pkg_aur" ]; then
        echo "$green[*]$blue installing $pkg_aur from aur...$reset"
        if [[ $installer == "paru" ]]; then
          "$installer" -S $pkg_aur --skipreview --noconfirm --needed
        else
           "$installer" -S $pkg_aur --noconfirm --needed

        fi
    fi
}

if [ $(id -u) = 0 ]; then
  echo "${error_box}Please don't run this script as sudo, it will ask for permission by itself"
  exit 1
fi

skip_installation=$(check_value "skip_script")
if [ "$skip_installation" == "true" ]; then
    echo "${error_box}Skipping script (if you don't expect this behaviour, edit your config file in ~/.config/scripts/config.json)$reset"
    exit 1
fi

#packages=$(return_value "category" "${output_config_file}")
#if [ "$packages" = "minimal" ]; then
#    echo "${info_box}Minimal setup"
#    cp "${app_list_dir}minimal.yaml" "${app_install_file}" -v
#elif [ "$packages" = "base" ]; then
#    echo "${info_box}Base setup"
#    cp "${app_list_dir}base.yaml" "${app_install_file}" -v
#elif [ "$packages" = "full" ]; then
#    echo "${info_box}Full setup"
#    cp "${app_list_dir}full.yaml" "${app_install_file}" -v
#else
#    echo "${error_box}No valid setup"
#    echo "${error_box}Edit ${output_config_file} or run setup script."
#fi

# think about how to manage packages lists to install on different distros

echo "${info_box}Installation of applications"
if [[ "${DISTRO}" -eq "arch" ]]; then
  echo "${blue}ó°£‡ Arch$reset detected"
    
    if [[ $(check_value "blackarch_repo" "${output_config_file}") == "true" ]]; then
      echo "${info_box} Updating repositories$reset"
      sudo pacman -Syu --noconfirm
      echo "${info_box} Adding blackarch repositories$reset"
      curl -O https://blackarch.org/strap.sh 
      echo 26849980b35a42e6e192c6d9ed8c46f0d6d06047 strap.sh | sha1sum -c 
      chmod +x strap.sh
      sudo ./strap.sh
      sudo pacman -Syy --noconfirm
    fi

    if [[ $(is_blackarch_repository) == "true" ]]; then
      echo "${info_box}Succesfully added blackarch repositories"
      echo "${info_box}Installing paru aur helper from blackarch repositories"
      sudo pacman -S paru --noconfirm --needed
      installer="paru"
    fi
    
    if [[ $(pkg_installed "paru") != 0 ]]; then
      echo "${error_box}Failed to install paru from repo, installing ${blue}paru${reset} aur helper manually"
      sh "${scripts_dir}install_aur.sh" "paru"
    fi

    if [[ $(pkg_installed "paru") != 0 ]]; then
      if [[ $(is_blackarch_repository) == "true" ]]; then
        echo "${error_box}Failed to install paru manually, installing ${blue}yay${blue} from blackarch repo"
        sudo pacman -S yay --noconfirm --needed
        installer="yay"
      fi
    fi

    if [[ $(pkg_installed "yay") != 0 && $(pkg_installed "paru") != 0 ]]; then
        echo "${error_box}Failed to install yay, installing ${blue}yay${reset} aur helper manually instead"
        sh "${scripts_dir}install_aur.sh" "yay"
        installer="yay"
    fi
    
    if [[ $(pkg_installed "yay") != 0 && $(pkg_installed "paru") != 0 ]]; then
      echo "${error_box}Failed to install yay, installing only basic repo packages with pacman, install aur helper yourself"
      installer="pacman"
    fi
  
    categories=$(return_value categories_to_install "${output_config_file}")
    categories_list=$(json_to_bash_array "${categories}")

    if [[ $(return_value category "${output_config_file}") == "minimal" ]]; then
      echo ""
      install_category "${default_app_list_dir}/minimal.lst"
    elif [[ $(return_value category "${output_config_file}") == "base" ]]; then
        install_category "${default_app_list_dir}/base.lst"
    elif [[ $(return_value category "${output_config_file}") == "full" ]]; then
        install_category "${default_app_list_dir}/full.lst"
    elif [[ $(return_value category "${output_config_file}") == "custom" ]]; then
        for category_file in ${categories_list[@]}; do
            install_category "$HOME/.config/dotfiles/packages/$category_file"
        done
    elif [[ $(return_value category) == "skip" ]]; then
          echo "${skip_msg} Installation"
    else
      echo "${error_box}Invalid category skipping installation"
    fi

else
  echo "${DISTRO} is unsupproted distribution, feel free to implement this yourself and contribute to this project."
fi 

echo $(return_value "scripts_after" "${output_config_file}")

if [[ $(return_value "scripts_after" "${output_config_file}") != "null" ]]; then
      scripts=$(return_value "scripts_after")
      echo "${scripts_after[@]}"
      for script in ${scripts_after[@]}; do
        echo "${info_box} Executing script ${scripts_dir}${script}"
        chmod +x "${scripts_dir}${script}"
        sh "${scripts_dir}${script}"
      done
fi

echo "Installation finished"

